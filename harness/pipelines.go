package harness

// Generated by https://quicktype.io

type Pipelines struct {
	Status        string      `json:"status"`
	Data          Data        `json:"data"`
	MetaData      interface{} `json:"metaData"`
	CorrelationID string      `json:"correlationId"`
}

type Data struct {
	Content          []PipelineContent `json:"content"`
	Pageable         Pageable          `json:"pageable"`
	TotalElements    int64             `json:"totalElements"`
	TotalPages       int64             `json:"totalPages"`
	Last             bool              `json:"last"`
	First            bool              `json:"first"`
	Sort             Sort              `json:"sort"`
	Number           int64             `json:"number"`
	NumberOfElements int64             `json:"numberOfElements"`
	Size             int64             `json:"size"`
	Empty            bool              `json:"empty"`
}

type PipelineContent struct {
	Name                  string                 `json:"name"`
	Identifier            string                 `json:"identifier"`
	Tags                  Tags                   `json:"tags"`
	Version               int64                  `json:"version"`
	NumOfStages           int64                  `json:"numOfStages"`
	CreatedAt             int64                  `json:"createdAt"`
	LastUpdatedAt         int64                  `json:"lastUpdatedAt"`
	Modules               []Module               `json:"modules"`
	ExecutionSummaryInfo  ExecutionSummaryInfo   `json:"executionSummaryInfo"`
	RecentExecutionsInfo  []RecentExecutionsInfo `json:"recentExecutionsInfo"`
	Filters               Filters                `json:"filters"`
	StageNames            []string               `json:"stageNames"`
	EntityValidityDetails EntityValidityDetails  `json:"entityValidityDetails"`
	StoreType             StoreType              `json:"storeType"`
	IsDraft               bool                   `json:"isDraft"`
	GitDetails            map[string]*string     `json:"gitDetails,omitempty"`
	ConnectorRef          *string                `json:"connectorRef,omitempty"`
}

type EntityValidityDetails struct {
	Valid       bool        `json:"valid"`
	InvalidYAML interface{} `json:"invalidYaml"`
}

type ExecutionSummaryInfo struct {
	NumOfErrors         []int64 `json:"numOfErrors"`
	Deployments         []int64 `json:"deployments"`
	LastExecutionTs     *int64  `json:"lastExecutionTs,omitempty"`
	LastExecutionStatus *Status `json:"lastExecutionStatus,omitempty"`
	LastExecutionID     *string `json:"lastExecutionId,omitempty"`
}

type Filters struct {
	Pms PmsClass `json:"pms"`
	CD  *CDClass `json:"cd,omitempty"`
	Ci  *CiClass `json:"ci,omitempty"`
}

type CDClass struct {
	DeploymentTypes     []DeploymentType     `json:"deploymentTypes"`
	EnvironmentNames    []EnvironmentName    `json:"environmentNames"`
	ServiceNames        []string             `json:"serviceNames"`
	InfrastructureTypes []InfrastructureType `json:"infrastructureTypes"`
}

type CiClass struct {
	RepoNames []string `json:"repoNames"`
}

type PmsClass struct {
	StageTypes           []string `json:"stageTypes"`
	FeatureFlagStepCount int64    `json:"featureFlagStepCount"`
}

type RecentExecutionsInfo struct {
	ExecutorInfo    ExecutorInfo `json:"executorInfo"`
	PlanExecutionID string       `json:"planExecutionId"`
	Status          Status       `json:"status"`
	StartTs         int64        `json:"startTs"`
	EndTs           int64        `json:"endTs"`
	RunSequence     int64        `json:"runSequence"`
}

type ExecutorInfo struct {
	TriggerType TriggerType `json:"triggerType"`
	Username    string      `json:"username"`
}

type Tags struct {
}

type Pageable struct {
	Sort       Sort  `json:"sort"`
	PageSize   int64 `json:"pageSize"`
	PageNumber int64 `json:"pageNumber"`
	Offset     int64 `json:"offset"`
	Paged      bool  `json:"paged"`
	Unpaged    bool  `json:"unpaged"`
}

type Sort struct {
	Sorted   bool `json:"sorted"`
	Unsorted bool `json:"unsorted"`
	Empty    bool `json:"empty"`
}

type Status string

const (
	Aborted          Status = "Aborted"
	ApprovalRejected Status = "ApprovalRejected"
	Expired          Status = "Expired"
	Failed           Status = "Failed"
	IgnoreFailed     Status = "IgnoreFailed"
	Success          Status = "Success"
)

type DeploymentType string

const (
	Kubernetes DeploymentType = "Kubernetes"
	SSH        DeploymentType = "Ssh"
)

type EnvironmentName string

const (
	Dev                EnvironmentName = "Dev"
	EnvironmentNameSSH EnvironmentName = "SSH"
	Local              EnvironmentName = "Local"
	TestEnv            EnvironmentName = "TestEnv"
)

type InfrastructureType string

const (
	KubernetesDirect InfrastructureType = "KubernetesDirect"
	Pdc              InfrastructureType = "Pdc"
)

type Module string

const (
	CD  Module = "cd"
	Ci  Module = "ci"
	Pms Module = "pms"
)

type TriggerType string

const (
	Artifact      TriggerType = "ARTIFACT"
	Manual        TriggerType = "MANUAL"
	SchedulerCron TriggerType = "SCHEDULER_CRON"
	Webhook       TriggerType = "WEBHOOK"
	WebhookCustom TriggerType = "WEBHOOK_CUSTOM"
)

type StoreType string

const (
	Inline StoreType = "INLINE"
	Remote StoreType = "REMOTE"
)

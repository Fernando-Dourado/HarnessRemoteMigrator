package harness

import (
	"log"

	"gopkg.in/yaml.v2"
)

// Generated by https://quicktype.io

type Service struct {
	Service ServiceClass `json:"service"`
	Created int64        `json:"created"`
	Updated int64        `json:"updated"`
}

type ServiceClass struct {
	Account     string      `json:"account"`
	Identifier  string      `json:"identifier"`
	Org         string      `json:"org"`
	Project     string      `json:"project"`
	Name        string      `json:"name"`
	Description interface{} `json:"description"`
	Tags        ServiceTags `json:"tags"`
	YAML        string      `json:"yaml"`
}

type ServiceTags struct {
	Tags []string
}
type ServiceYaml struct {
	Service struct {
		Name              string `yaml:"name"`
		Identifier        string `yaml:"identifier"`
		OrgIdentifier     string `yaml:"orgIdentifier"`
		ProjectIdentifier string `yaml:"projectIdentifier"`
		ServiceDefinition struct {
			Spec struct {
				Manifests []struct {
					Manifest struct {
						Identifier string `yaml:"identifier"`
						Type       string `yaml:"type"`
						Spec       struct {
							Store struct {
								Type string `yaml:"type"`
								Spec struct {
									ConnectorRef              string   `yaml:"connectorRef"`
									GitFetchType              string   `yaml:"gitFetchType"`
									Paths                     []string `yaml:"paths"`
									Branch                    string   `yaml:"branch"`
									Files                     []string `yaml:"files"`
									SkipResourceVersioning    bool     `yaml:"skipResourceVersioning"`
									EnableDeclarativeRollback bool     `yaml:"enableDeclarativeRollback"`
								} `yaml:"spec"`
							} `yaml:"store"`
							ValuesPaths []string `yaml:"valuesPaths"`
						} `yaml:"spec"`
					} `yaml:"manifest"`
				} `yaml:"manifests"`
			} `yaml:"spec"`
			Type string `yaml:"type"`
		} `yaml:"serviceDefinition"`
	} `yaml:"service"`
}

type ServiceRequest struct {
	Name              string      `json:"name"`
	Identifier        string      `json:"identifier"`
	Tags              ServiceTags `json:"tags"`
	ProjectIdentifier string      `json:"projectIdentifier"`
	OrgIdentifier     string      `json:"orgIdentifier"`
	YAML              string      `json:"yaml"`
}

func (s *ServiceClass) ParseYAML() (*ServiceYaml, error) {
	serviceYaml := &ServiceYaml{}
	err := yaml.Unmarshal([]byte(s.YAML), &serviceYaml)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	return serviceYaml, nil
}

func (s *ServiceClass) UpdateService(api *APIRequest) error {
	service := &ServiceRequest{
		Name:              s.Name,
		Identifier:        s.Identifier,
		ProjectIdentifier: s.Project,
		OrgIdentifier:     s.Org,
		YAML:              s.YAML,
	}
	err := api.UpdateService(*service, s.Account)
	if err != nil {
		return err
	}
	return nil
}
